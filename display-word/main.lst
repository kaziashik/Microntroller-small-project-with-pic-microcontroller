CCS PCM C Compiler, Version 4.057, 15268               09-Oct-21 17:50

               Filename: main.lst

               ROM used: 339 words (4%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         17 (5%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0F0
0003:  NOP
.................... #include <16F877A.H> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay (clock=20MHz) 
0030:  MOVLW  23
0031:  MOVWF  04
0032:  BCF    03.7
0033:  MOVF   00,W
0034:  BTFSC  03.2
0035:  GOTO   043
0036:  MOVLW  06
0037:  MOVWF  78
0038:  CLRF   77
0039:  DECFSZ 77,F
003A:  GOTO   039
003B:  DECFSZ 78,F
003C:  GOTO   038
003D:  MOVLW  7B
003E:  MOVWF  77
003F:  DECFSZ 77,F
0040:  GOTO   03F
0041:  DECFSZ 00,F
0042:  GOTO   036
0043:  RETLW  00
.................... #fuses HS 
.................... #define use_portb_lcd 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0054:  MOVLW  F0
0055:  BSF    03.5
0056:  MOVWF  06
....................       lcd.rw = 1; 
0057:  BCF    03.5
0058:  BSF    06.2
....................       delay_cycles(1); 
0059:  NOP
....................       lcd.enable = 1; 
005A:  BSF    06.0
....................       delay_cycles(1); 
005B:  NOP
....................       high = lcd.data; 
005C:  MOVF   06,W
005D:  SWAPF  06,W
005E:  ANDLW  0F
005F:  MOVWF  2A
....................       lcd.enable = 0; 
0060:  BCF    06.0
....................       delay_cycles(1); 
0061:  NOP
....................       lcd.enable = 1; 
0062:  BSF    06.0
....................       delay_us(1); 
0063:  GOTO   064
0064:  GOTO   065
0065:  NOP
....................       low = lcd.data; 
0066:  MOVF   06,W
0067:  SWAPF  06,W
0068:  ANDLW  0F
0069:  MOVWF  29
....................       lcd.enable = 0; 
006A:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
006B:  MOVLW  00
006C:  BSF    03.5
006D:  MOVWF  06
....................       return( (high<<4) | low); 
006E:  BCF    03.5
006F:  SWAPF  2A,W
0070:  MOVWF  77
0071:  MOVLW  F0
0072:  ANDWF  77,F
0073:  MOVF   77,W
0074:  IORWF  29,W
0075:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0044:  SWAPF  2A,W
0045:  ANDLW  F0
0046:  MOVWF  77
0047:  MOVLW  0F
0048:  ANDWF  06,W
0049:  IORWF  77,W
004A:  MOVWF  06
....................       delay_cycles(1); 
004B:  NOP
....................       lcd.enable = 1; 
004C:  BSF    06.0
....................       delay_us(2); 
004D:  MOVLW  03
004E:  MOVWF  77
004F:  DECFSZ 77,F
0050:  GOTO   04F
....................       lcd.enable = 0; 
0051:  BCF    06.0
.................... } 
0052:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0053:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0076:  MOVF   78,W
0077:  MOVWF  29
0078:  BTFSC  29.7
0079:  GOTO   054
....................       lcd.rs = address; 
007A:  BTFSS  27.0
007B:  BCF    06.1
007C:  BTFSC  27.0
007D:  BSF    06.1
....................       delay_cycles(1); 
007E:  NOP
....................       lcd.rw = 0; 
007F:  BCF    06.2
....................       delay_cycles(1); 
0080:  NOP
....................       lcd.enable = 0; 
0081:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0082:  SWAPF  28,W
0083:  MOVWF  29
0084:  MOVLW  0F
0085:  ANDWF  29,F
0086:  MOVF   29,W
0087:  MOVWF  2A
0088:  CALL   044
....................       lcd_send_nibble(n & 0xf); 
0089:  MOVF   28,W
008A:  ANDLW  0F
008B:  MOVWF  29
008C:  MOVWF  2A
008D:  CALL   044
.................... } 
008E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
008F:  MOVLW  00
0090:  BSF    03.5
0091:  MOVWF  06
....................     lcd.rs = 0; 
0092:  BCF    03.5
0093:  BCF    06.1
....................     lcd.rw = 0; 
0094:  BCF    06.2
....................     lcd.enable = 0; 
0095:  BCF    06.0
....................     delay_ms(15); 
0096:  MOVLW  0F
0097:  MOVWF  23
0098:  CALL   030
....................     for(i=1;i<=3;++i) { 
0099:  MOVLW  01
009A:  MOVWF  21
009B:  MOVF   21,W
009C:  SUBLW  03
009D:  BTFSS  03.0
009E:  GOTO   0A7
....................        lcd_send_nibble(3); 
009F:  MOVLW  03
00A0:  MOVWF  2A
00A1:  CALL   044
....................        delay_ms(5); 
00A2:  MOVLW  05
00A3:  MOVWF  23
00A4:  CALL   030
....................     } 
00A5:  INCF   21,F
00A6:  GOTO   09B
....................     lcd_send_nibble(2); 
00A7:  MOVLW  02
00A8:  MOVWF  2A
00A9:  CALL   044
....................     for(i=0;i<=3;++i) 
00AA:  CLRF   21
00AB:  MOVF   21,W
00AC:  SUBLW  03
00AD:  BTFSS  03.0
00AE:  GOTO   0B8
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AF:  MOVF   21,W
00B0:  CALL   004
00B1:  MOVWF  22
00B2:  CLRF   27
00B3:  MOVF   22,W
00B4:  MOVWF  28
00B5:  CALL   053
00B6:  INCF   21,F
00B7:  GOTO   0AB
.................... } 
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   0FD (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00D2:  DECFSZ 24,W
00D3:  GOTO   0D5
00D4:  GOTO   0D8
....................      address=lcd_line_two; 
00D5:  MOVLW  40
00D6:  MOVWF  25
....................    else 
00D7:  GOTO   0D9
....................      address=0; 
00D8:  CLRF   25
....................    address+=x-1; 
00D9:  MOVLW  01
00DA:  SUBWF  23,W
00DB:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
00DC:  MOVF   25,W
00DD:  IORLW  80
00DE:  MOVWF  26
00DF:  CLRF   27
00E0:  MOVF   26,W
00E1:  MOVWF  28
00E2:  CALL   053
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00BB:  MOVF   22,W
00BC:  XORLW  0C
00BD:  BTFSC  03.2
00BE:  GOTO   0C6
00BF:  XORLW  06
00C0:  BTFSC  03.2
00C1:  GOTO   0CE
00C2:  XORLW  02
00C3:  BTFSC  03.2
00C4:  GOTO   0E4
00C5:  GOTO   0E9
....................      case '\f'   : lcd_send_byte(0,1); 
00C6:  CLRF   27
00C7:  MOVLW  01
00C8:  MOVWF  28
00C9:  CALL   053
....................                    delay_ms(2); 
00CA:  MOVLW  02
00CB:  MOVWF  23
00CC:  CALL   030
....................                                            break; 
00CD:  GOTO   0EF
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00CE:  MOVLW  01
00CF:  MOVWF  23
00D0:  MOVLW  02
00D1:  MOVWF  24
*
00E3:  GOTO   0EF
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00E4:  CLRF   27
00E5:  MOVLW  10
00E6:  MOVWF  28
00E7:  CALL   053
00E8:  GOTO   0EF
....................      default     : lcd_send_byte(1,c);     break; 
00E9:  MOVLW  01
00EA:  MOVWF  27
00EB:  MOVF   22,W
00EC:  MOVWF  28
00ED:  CALL   053
00EE:  GOTO   0EF
....................    } 
.................... } 
00EF:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... void main () 
....................  
.................... { 
00F0:  CLRF   04
00F1:  BCF    03.7
00F2:  MOVLW  1F
00F3:  ANDWF  03,F
00F4:  BSF    03.5
00F5:  BSF    1F.0
00F6:  BSF    1F.1
00F7:  BSF    1F.2
00F8:  BCF    1F.3
00F9:  MOVLW  07
00FA:  MOVWF  1C
.................... lcd_init(); 
00FB:  BCF    03.5
00FC:  GOTO   08F
.................... while(TRUE) 
.................... { 
.................... printf(lcd_putc,"UTeM"); 
00FD:  CLRF   21
00FE:  MOVF   21,W
00FF:  CALL   00C
0100:  INCF   21,F
0101:  MOVWF  77
0102:  MOVWF  22
0103:  CALL   0BB
0104:  MOVLW  04
0105:  SUBWF  21,W
0106:  BTFSS  03.2
0107:  GOTO   0FE
.................... delay_ms(1000); 
0108:  MOVLW  04
0109:  MOVWF  21
010A:  MOVLW  FA
010B:  MOVWF  23
010C:  CALL   030
010D:  DECFSZ 21,F
010E:  GOTO   10A
.................... printf(lcd_putc,"\f"); 
010F:  MOVLW  0C
0110:  MOVWF  22
0111:  CALL   0BB
.................... delay_ms(500); 
0112:  MOVLW  02
0113:  MOVWF  21
0114:  MOVLW  FA
0115:  MOVWF  23
0116:  CALL   030
0117:  DECFSZ 21,F
0118:  GOTO   114
.................... printf(lcd_putc,"\nKAZI ASHIK"); 
0119:  CLRF   21
011A:  MOVF   21,W
011B:  CALL   015
011C:  INCF   21,F
011D:  MOVWF  77
011E:  MOVWF  22
011F:  CALL   0BB
0120:  MOVLW  0B
0121:  SUBWF  21,W
0122:  BTFSS  03.2
0123:  GOTO   11A
.................... delay_ms(1000); 
0124:  MOVLW  04
0125:  MOVWF  21
0126:  MOVLW  FA
0127:  MOVWF  23
0128:  CALL   030
0129:  DECFSZ 21,F
012A:  GOTO   126
.................... printf(lcd_putc,"\f"); 
012B:  MOVLW  0C
012C:  MOVWF  22
012D:  CALL   0BB
.................... delay_ms(500); 
012E:  MOVLW  02
012F:  MOVWF  21
0130:  MOVLW  FA
0131:  MOVWF  23
0132:  CALL   030
0133:  DECFSZ 21,F
0134:  GOTO   130
.................... printf(lcd_putc,"\nFTKEE"); 
0135:  CLRF   21
0136:  MOVF   21,W
0137:  CALL   025
0138:  INCF   21,F
0139:  MOVWF  77
013A:  MOVWF  22
013B:  CALL   0BB
013C:  MOVLW  06
013D:  SUBWF  21,W
013E:  BTFSS  03.2
013F:  GOTO   136
.................... delay_ms(1000); 
0140:  MOVLW  04
0141:  MOVWF  21
0142:  MOVLW  FA
0143:  MOVWF  23
0144:  CALL   030
0145:  DECFSZ 21,F
0146:  GOTO   142
.................... printf(lcd_putc,"\f"); 
0147:  MOVLW  0C
0148:  MOVWF  22
0149:  CALL   0BB
.................... delay_ms(500); 
014A:  MOVLW  02
014B:  MOVWF  21
014C:  MOVLW  FA
014D:  MOVWF  23
014E:  CALL   030
014F:  DECFSZ 21,F
0150:  GOTO   14C
....................  
.................... } 
0151:  GOTO   0FD
....................  
.................... } 
....................  
0152:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
